# -*- coding: utf-8 -*-
"""Module1_week2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jCdHiItp7OhwngVwzutKBQsRpgiEb3Oo

#Exercise 1: Sliding window technique
"""

def sliding_window(data, size):
    max_numbers = []
    for i in range (len(data) - size + 1):
        maxi = data[0]
        for j in range(i,i+size):
            if data[j] > maxi:
                maxi=data[j]
        max_numbers.append(maxi)
    return max_numbers


"""#Exercise 2: Count words"""

def count_chars(string):
    #Tách các chữ cái
    words = list(string)
    count = {}
    for word in words:
        if word in count:
            count[word] += 1
        else:
            count[word] = 1
    return count

"""#Exercise 3: Read from file"""

def word_count(file_path):
    with open(file_path, "r") as f:
        data = f.read()
        words = data.split(' ')
        count = {}
        for word in words:
            if word in count:
                count[word] += 1
            else:
                count[word] = 1
        return count

"""#Exercise 4: Levenshtein distance."""

def levenshtein(source, target):
    row = len(source) + 1
    col = len(target) + 1
    matrix = [[0] * col for _ in range(row)]
    for i in range(row):
        matrix[i][0] = i
    for j in range(col):
        matrix[0][j] = j
    for i in range(1,row):
        for j in range(1,col):
            if source[i-1] == target[j-1]:
                cost = 0
            else:
                cost = 1
            matrix[i][j] = min(matrix[i-1][j] + 1, matrix[i][j-1] + 1, matrix[i-1][j-1] + cost)
    return matrix[row-1][col-1]

