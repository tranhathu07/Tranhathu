# -*- coding: utf-8 -*-
"""Module2_week1_Image_Processing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UntW5yo04Abus_HoO3iX1a1sJ_hd1oSA
"""

!gdown 1i9dqan21DjQoG5Q_VEvm0LrVwAlXD0vB
import matplotlib . image as mpimg
import numpy as np
img = mpimg.imread ('/content/dog.jpeg')
def maxi(img):
    max_img = np.max(img[...,:3],axis = 2)
    return max_img
def mini(img):
    min_img = np.min(img[...,:3],axis = 2)
    return min_img
def grayscale(img):
    max_img = maxi(img)
    min_img = mini(img)
    gray_img = (max_img + min_img)/2
    return gray_img
gray_img_01= grayscale(img)
print(gray_img_01[0,0])

import matplotlib . image as mpimg
import numpy as np
img = mpimg.imread ('/content/dog.jpeg')
def img_aver(img):
    img_avg = np.mean(img[...,:3],axis = 2)
    return img_avg
img_avg = img_aver(img)
print(img_avg[0,0])

import matplotlib.image as mpimg
import numpy as np
img = mpimg.imread('/content/dog.jpeg')
def luminosity(img):
    img_lumi= np.dot(img[...,3],[0.21, 0.72, 0.07])
    return img_lumi

gray_img_03 = luminosity(img)
print(gray_img_03[0,0])

!gdown 1iA0WmVfW88HyJvTBSQDI5vesf-pgKabq

import pandas as pd
df = pd.read_csv('/content/advertising.csv')

max = df['Sales'].max()
index = df['Sales'].idxmax()
print(f'Max:{max} - Index:{index}')

aver = df['TV'].mean()
print(aver)

value = df['Sales'][df['Sales'] >= 20].count()
print(value)



df_filtered = df[df['Sales'] >= 15]
mean_radio = df_filtered['Radio'].mean()

print(mean_radio)

value = df['Sales'][df['Newspaper'] >= df['Newspaper'].mean()].sum()
print(value)

a = df['Sales'].mean()
score = []
for i in df['Sales']:
    if i > a:
        score.append('Good')
    elif i < a:
        score.append('Bad')
    else:
        score.append('Average')
print(score[7:10])

score = ['Good' if x > a else 'Bad' if x < a else 'Average' for x in df['Sales']]
print(score[7:10])

def find_mean_closest_value(data):
    # Calculate mean without using the overwritten 'sum' variable
    mean_value = np.mean(data)
    nearest_data = None
    min_distance = float('inf')
    for value in data:
        distance = abs(value - mean_value)
        if distance < min_distance:
            min_distance = distance
            nearest_data = value
    return nearest_data

find_mean_closest_value(df['Sales'])
score  = ['Good' if x > a else 'Bad' if x < a else 'Average' for x in df['Sales']]
print(score[7:10])