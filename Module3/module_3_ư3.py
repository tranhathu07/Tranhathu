# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ta05asuWzdxqeaX9lj7UfPPP57WP9m6T
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor
from sklearn.preprocessing import OrdinalEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error

dataset_path = './Housing.csv'
df = pd.read_csv(dataset_path)

categorical_cols = df.select_dtypes(include=['object']).columns.to_list()
print("Categorical columns:", categorical_cols)

ordinal_encoder = OrdinalEncoder()
encoded_categorical_cols = ordinal_encoder.fit_transform(df[categorical_cols])
encoded_categorical_df = pd.DataFrame(encoded_categorical_cols, columns=categorical_cols)

numerical_df = df.drop(categorical_cols, axis=1)
encoded_df = pd.concat([numerical_df, encoded_categorical_df], axis=1)

X = encoded_df.iloc[:, 1:].values
y = encoded_df.iloc[:, 0].values

test_size = 0.3
random_state = 1
is_shuffle = True

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=test_size, random_state=random_state, shuffle=is_shuffle)

rf_regressor = RandomForestRegressor(random_state=random_state)
rf_regressor.fit(X_train, y_train)

ab_regressor = AdaBoostRegressor(random_state=random_state)
ab_regressor.fit(X_train, y_train)

gb_regressor = GradientBoostingRegressor(random_state=random_state)
gb_regressor.fit(X_train, y_train)

y_pred_rf = rf_regressor.predict(X_val)
y_pred_ab = ab_regressor.predict(X_val)
y_pred_gb = gb_regressor.predict(X_val)

mae_rf = mean_absolute_error(y_val, y_pred_rf)
mse_rf = mean_squared_error(y_val, y_pred_rf)

mae_ab = mean_absolute_error(y_val, y_pred_ab)
mse_ab = mean_squared_error(y_val, y_pred_ab)

mae_gb = mean_absolute_error(y_val, y_pred_gb)
mse_gb = mean_squared_error(y_val, y_pred_gb)

print('Evaluation results on validation set:')
print(f'Random Forest - Mean Absolute Error: {mae_rf}, Mean Squared Error: {mse_rf}')
print(f'AdaBoost - Mean Absolute Error: {mae_ab}, Mean Squared Error: {mse_ab}')
print(f'Gradient Boosting - Mean Absolute Error: {mae_gb}, Mean Squared Error: {mse_gb}')